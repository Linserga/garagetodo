SQL task
Given tables:

tasks (id, name, status, project_id)
projects (id, name)

Write the queries for:
1.get all statuses, not repeating, alphabetically ordered
2.get the count of all tasks in each project, order by tasks count descending
3.get the count of all tasks in each project, order by projects names
4.get the tasks for all projects having the name beginning with “N” letter
5.get the list of all projects containing the ‘a’ letter in the middle of the name, and show the
tasks count near each project. Mention that there can exist projects without tasks and
tasks with project_id=NULL
6. get the list of tasks with duplicate names. Order alphabetically
7. get the list of tasks having several exact matches of both name and status, from the
project ‘Garage’. Order by matches count
8. get the list of project names having more than 10 tasks in status ‘completed’. Order by
project_id

----------------------------------------------------

class Task < ActiveRecord::Base
  belongs_to :project
end

class Project < ActiveRecord::Base
	has_many :tasks
end

1. Task.select(:status).order(:status).distinct

2. Task.all.group(:project_id).count.sort_by{|k,v|v}.reverse

3. Task.joins(:project).group(:project_id).order('projects.name').count

4. Task.joins(:project).where('tasks.name like ?', "N%")

5. Project.where('projects.name like ?', '%a%').joins(:tasks).group('projects.name').count

6. Task.select('id, count(id) as quantity').group(:name).having('quantity > 1')

7. Task.select('tasks.id, count(tasks.id) as quantity, tasks.name, status').group(:name, :status).having('quantity > 1').joins(:project).where("projects.name = 'Garage'").order('quantity')

8. Project.select('projects.name, projects.id').joins(:tasks).group('projects.name').having('count(tasks.status) > 10').order('projects.id')
